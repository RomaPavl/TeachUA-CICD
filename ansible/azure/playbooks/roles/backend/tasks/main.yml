---
- name: Ensure Docker, Git & pip are installed
  apt:
    name:
      - docker.io
      - git
      - python3-pip
    state: present
    update_cache: yes
  become: true

- name: Install Docker SDK for Ansible modules
  pip:
    name: docker
    executable: pip3
  become: true

- name: Ensure Docker is running
  service:
    name: docker
    state: started
    enabled: yes
  become: true

- name: Install PostgreSQL client and dependencies
  apt:
    name:
      - postgresql-client
      - python3-psycopg2
    state: present
    update_cache: yes
  become: true
  
- name: Install Azure SDK and mgmt dependencies
  pip:
    name: "ansible[azure]"
    executable: pip3
  become: true

- name: Get secrets from Azure Key Vault
  azure.azcollection.azure_rm_keyvaultsecret_info:
    name: "{{ item }}"
    vault_uri: "{{ vault_url }}"
    client_id: "{{ client_id }}"
    secret: "{{ secret }}"
    tenant: "{{ tenant }}"
  loop:
    - pgadmin
    - pg-pass
    - db-name
    - db-password
    - db-host
  register: secrets

- name: Set all secrets
  set_fact:
    postgres_admin_user: "{{ secrets.results[0].value }}"
    postgres_admin_password: "{{ secrets.results[1].value }}"
    db_name: "{{ secrets.results[2].value }}"
    db_password: "{{ secrets.results[3].value }}"
    db_host: "{{ secrets.results[4].value }}"
    
- name: Create Docker network for service discovery
  community.docker.docker_network:
    name: "{{ network_name }}"
    state: present

- name: Pull frontend image from Docker Hub
  community.docker.docker_image:
    name: "{{ docker_image }}"
    tag: "{{ docker_image_tag }}"
    source: pull

- name: Copy database dump file to /tmp
  copy:
    src: "{{ dump_file }}"
    dest: "/tmp/{{ dump_file }}"
    mode: '0644'

- name: Create application database user
  community.postgresql.postgresql_user:
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ postgres_admin_password }}"
    login_db: "postgres"
    ssl_mode: require
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    encrypted: yes
    state: present

- name: Create application database
  community.postgresql.postgresql_db:
    login_host: "{{ db_host }}"
    login_port: "{{ db_port }}"
    login_user: "{{ postgres_admin_user }}"
    login_password: "{{ postgres_admin_password }}"
    maintenance_db: "postgres"
    ssl_mode: require
    name: "{{ db_name }}"
    state: present

- name: Restore database from dump
  shell: |
    PGPASSWORD="{{ postgres_admin_password }}" \
    psql "host={{ db_host }} \
          port=5432 \
          dbname={{ db_name }} \
          user={{ postgres_admin_user }} \
          sslmode=require" \
       < /tmp/{{ dump_file }}
  args:
    executable: /bin/bash

- name: Deploy & start the backend container (with env_file)
  community.docker.docker_container:
    name: "{{ container_name }}"
    image: "{{ docker_image }}:{{ docker_image_tag }}"
    state: started

    restart_policy: always
    networks:
      - name: "{{ network_name }}"
    ports: "{{ ports }}"
  become: true

